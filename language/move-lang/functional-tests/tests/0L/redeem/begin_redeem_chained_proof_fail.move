//! account: dummy-prevents-genesis-reload, 100000 ,0, validator

// Alice Submit VDF Proof
//! new-transaction
//! account: alice, 10000000GAS
//! sender: alice
script {
use 0x0::MinerState;
// use 0x0::Debug;
use 0x0::Transaction;

fun main(sender: &signer) {
    let difficulty = 100;
    let challenge = x"aa";
    // Generate solutions with cd ./verfiable-delay/ cargo run -- -l=4096 aa 100
    // the -l=4096 is important because this is the security paramater of 0L miner.
    let solution = x"002fb6ae7221c8593fb21599fdbee8837426761b328f76609295c9175d5f061bb29792236d22366d0d9305040661b54f59cea3f8e143a584f178981549b462bdc96a3ef270dc1457985390a3401c484b721fdd00f0330b894755d34a311c547b73065aec1a71528d0dc350c13fa68aaf34d206a5fa56f7391b889f1226d7aacc3624eca7f27d523db4f2f18e4ca0bd4cd91b4133cce16b40245d9d393a0c32013f91c5d2bfaca7e5e4c4f71ea90bdc9047657e02e7a429b3f4988b3a7f0789a6c4e0b60af26139dba0c5a83eecc785dbdde0012e47ef3af7fe60e366b8e87ac437da111c8ffb57f400980513b47db04c47787380ea564ffaf1653aa5889e5b31340022cfdd5956cf2fc9130ea4e45a700a5fbd990aae8a4643b22508b6d0b6b80186b5eea2c656296ad2d2043867bd93d48a284b90c2792aeeb25f6a7f0dacac617e7660074e18109e6675480ebc6340f4b01d74d8e5943b9bc8f9acdb3d8ebef5f593858913ebbc2f0d4b1fc76dacca4b032bb8d97e018a614e667bbbb07da891d23028b60275bc2c715e975b347c2e72e5753282959973f34742a43393d76b025b6444e4cabf4272eceae3d94a19ae1f24edf725e8892eb45f34e8a224a5ee56effa8f4b5a3a3bf810579cba99f0e954ce8459afe963bbb2c2578bd5de48e6df56a29ef03dda9e03e19c08fed8b467065afd38720f634c646698a1841c4a21037700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    let reported_tower_height = 1;

    // return solution
    let proof = MinerState::create_proof_blob(challenge, difficulty, solution, reported_tower_height);
    MinerState::commit_state(sender, proof);
    let verified_tower_height_after = MinerState::get_miner_tower_height({{alice}});
    // Debug::print(&verified_tower_height_after);

    Transaction::assert(verified_tower_height_after == reported_tower_height, 10008001);


}
}
// check: EXECUTED


//! new-transaction
//! sender: alice
script {
use 0x0::MinerState;
use 0x0::Debug;
use 0x0::Transaction;

fun main(sender: &signer) {
    let difficulty = 100;

    // Generate solutions with cd ./verfiable-delay/ cargo run -- -l=4096 aa 100
    // the -l=4096 is important because this is the security paramater of 0L miner.
    // NOTE: This challenge is not the immediately preceeding solution in the chain.
    // neither is it a valid challenge and solution pair in this test. But it will fail before evaluating for correctness.
    let challenge = x"002fb6ae7221c8593fb21599fdbee8837426761b328f76609295c9175d5f061bb29792236d22366d0d9305040661b54f59cea3f8e143a584f178981549b462bdc96a3ef270dc1457985390a3401c484b721fdd00f0330b894755d34a311c547b73065aec1a71528d0dc350c13fa68aaf34d206a5fa56f7391b889f1226d7aacc3624eca7f27d523db4f2f18e4ca0bd4cd91b4133cce16b40245d9d393a0c32013f91c5d2bfaca7e5e4c4f71ea90bdc9047657e02e7a429b3f4988b3a7f0789a6c4e0b60af26139dba0c5a83eecc785dbdde0012e47ef3af7fe60e366b8e87ac437da111c8ffb57f400980513b47db04c47787380ea564ffaf1653aa5889e5b31340022cfdd5956cf2fc9130ea4e45a700a5fbd990aae8a4643b22508b6d0b6b80186b5eea2c656296ad2d2043867bd93d48a284b90c2792aeeb25f6a7f0dacac617e7660074e18109e6675480ebc6340f4b01d74d8e5943b9bc8f9acdb3d8ebef5f593858913ebbc2f0d4b1fc76dacca4b032bb8d97e018a614e667bbbb07da891d23028b60275bc2c715e975b347c2e72e5753282959973f34742a43393d76b025b6444e4cabf4272eceae3d94a19ae1f24edf725e8892eb45f34e8a224a5ee56effa8f4b5a3a3bf810579cba99f0e954ce8459afe963bbb2c2578bd5de48e6df56a29ef03dda9e03e19c08fed8b467065afd38720f634c646698a1841c4a

    let solution = x"003c7118de0a478ba5ee902db38717fcf35c32aa43843bdf8323227d6dae3ce6e767d06061655482b907ed76bacf41ac9977686b0d558f580fc3cd71198cf9658a3d6d4ced085389c7c2913c64e33ce501bded8f7424cf3c56e0851a80787a7ec77c80527d360934c7228435c0a0fcaf5f536164722363ad03f150bfe4d6d9df7ddc11abb77ede0ad8e7c3a2141b7d6da8fb76d4abf71f02b2b88690a56fdb3920ed50dede2bcb72ea1b36ea315675394889263f4ce05cc95d034657f1d166f567791f0c0a01f78e1e1d36f45339bab5b5c3179e7ae2be50eb33d238559c64cce5d3bf91c010c50cf0a39026c1e6a54681a6b347edef9f0055aa02ffeb65b628e4fffc2bf836b32015bcf2dd9c2c3a588d8cbd308632b625ebc6f0207865fae445a868c9e8b167e4a832857fd0473f29e54b0341820c8889e108405a3a756aefbe9935b3f5d87637fa79d4f028bdab1591f8e5e58603af769e985430d49e1768c9f8aaf5dc809c5a7a13a114de81e69e2ffb044afeb7a46bc5957290307aa200034016f6e3427e50b6dd63854689304cf9f4860dd2eb7218ceda527047c88a895c5a0aa3358e7fe87a18cd68ea247657ec6668451f651de04fa346dbebbfb9ab0463c591389dbff0be81aebdd4fd6b060d47f58ea52ab47b43ca6e50c66a59159eb2d04e12a846e6de19331cfa4e9243612fac8e7aee027194ff1ff30b503443c
    let reported_tower_height = 2;

    // return solution
    let proof = MinerState::create_proof_blob(challenge, difficulty, solution, reported_tower_height);
    MinerState::commit_state(sender, proof);
    let verified_tower_height_after = MinerState::get_miner_tower_height({{alice}});
    Debug::print(&verified_tower_height_after);

    Transaction::assert(verified_tower_height_after == reported_tower_height, 10008001);


}
}
// check: ABORTED
