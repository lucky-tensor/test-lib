//! account: dummy-prevents-genesis-reload, 100000 ,0, validator
//! account: alice, 10000000GAS

// Alice Submit VDF Proof
//! new-transaction
//! sender: alice
script {
use 0x0::MinerState;
// use 0x0::Debug;
use 0x0::Transaction;

// Simulates a miner onboarding proof (Alice's block_0.json)
fun main(sender: &signer) {
    let difficulty = 2400000;
    let challenge = x"3dfca19b9914d78ec0c3d04c486e7baa402e9aaf54ca8c39bab641b0c9829070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006578706572696d656e74616c009f
    // Generate solutions with cd ./verfiable-delay/ cargo run -- -l=4096 aa 100
    // the -l=4096 is important because this is the security paramater of 0L miner.
    let solution = x"0053e7419eb01e955666d49a25912dd82f4d3d627aededf01478bcef332f2d68fd6238e3cc4636af163c72be8aaf65a7093a70d74d06342115b3d29f50a6eb51f310595cc7a0e2872d4cd6ecfee18020d5cde01fe8bccb451c61bd00c0932fc64e6048e3ad7b458d6250c8881af5a58a3aa42200dcd13681883bb0019e3dfa782300ef8dc00c1f83cb7fbee581a277cf8a6c9535fd5847697325c0db526d4ff1ddf7282eac92de127fbb071f49f3abb54f0c98ea6383b3764fc0dfc1b9cba71be6cda2e927882bd56cf2985db15bfa3c9117982ef97fc415ba9805b731d313b49cb53935fb6c02c91d1a2f6ebe19ef720f1e0178fa31eecdb3e1609710ea583e28004bd6683777eee6278c773a8aa2db640deee384f1304aebd09de4837c4e76ce362e2060770790b2c6f57daa263e1638dccff310cce683c7b5d86353c8550a97ee8c91142f51f0b815d4dd9fe23fd062163427523b3c45ac947edf6189ce75bbd7d07a424a7cf925a1cf7a3f9c7a46fa6eba1ab7cbc6020b9dffbf11aa14f68f74ba50576be7374ef0173caa4f4f366255467af0ec0e73b6133c572c068db9d8c8bcb54fbb3cd5e7786480e166d6e764cf719cb134d6512995150fd5b2be7189f709cf5482379edb1907b553962909f940729d48d570240c67b298c2b64d0397437880c1df3d0331811420086eed1da3fc88a43d7baf2c3f75106b78c57bb4a393002da59a4f3e1ea4fc75cc9028451f0750d6a9aabee14334c12b58bb07280287cf3454ac3c2a42c4f0f6489a253613eb13d55f2d1f5f9fd63da3c3daf75a700f3a5775914c395413696fbd967f577ad8bd0c0b91106546594c68f9fe91161c1ec7afe7275e2dc4f7d0a286f943ec41d221a020a73d586ef4731e615f6f3276382111405af6192bab0fe8c577b368543b8232614180ba5042bda4330c1e293454bfca309e22a5d33d5a97f0c1d1c2f60ad41f07254cab13a9c4c526301afe374220c3b1cb3dcaa901373a410ee9b7fc0c05a07dd8e09c700166765430fec25b286290d39e6b65b47cab5bfce98994d844b92c164702f6493b6fe9971afa91697f83001de859c1a0220ec3ebabc9551c32e795650650592694a258e63523377025c7593676e457e604025023c2676ff4198ecffa107c8c433b0f41de1944f7d8c56d37cda3ee3f446d14d379329ecbbf09b51ba4e81803388cabee334a2bb55b1336ae5a7fb80f296e03deaeac4f373d0c509c75fc946159e88c2f9251f8d25913631f49a9b1c9f0fb2580baa3aa33d0d9c6e43460a072075c30286155bbe5bc838850697afc23bf6d048913153c34b596f821db3613ae4bcaf13c50f0c32dbbd60dc83b17376265f5792594fbcfb4cd18e9acf77d6869866585fd723e182d6e75e48ba3c53e7311c8e154e8fd864b6f13ca31748447b6a33ed6822c015e21baad76b7";
    let reported_tower_height = 0;

    // return solution
    let proof = MinerState::create_proof_blob(challenge, difficulty, solution);
    MinerState::commit_state(sender, proof);

    let verified_tower_height_after = MinerState::test_helper_get_miner_tower_height({{alice}});
    // Debug::print(&verified_tower_height_after);
    // Debug::print(&verified_tower_height_after);

    Transaction::assert(verified_tower_height_after == reported_tower_height, 10008001);



}
}
// check: EXECUTED


//! new-transaction
//! sender: alice
script {
use 0x0::MinerState;
// use 0x0::Debug;
// use 0x0::Globals;
use 0x0::Transaction;

// This is bob's proof, not alice's, so it should fail. While it's a valid VDF, it is disconnected from the block_0.json because the challenge doesn't match the previous proof sha3. The transaction will fail before attempting a vdf verification.

fun main(sender: &signer) {
    let difficulty = 2400000;

    let challenge = x"a0e9a5c7944e80a0e11088d3e0c11c615dd4bbfad08a15c757ab09a31b47b586";

    let solution = x"0045ba5ab9eda3fc9f7ddf70c9462ac01230237ac15c16fe26124d143475f9d7cb181515ebee11886e177f2058f4eba7dec432c3f5ba546e9a13bc85d4e7317140b6fd7a4b91059c4f36af8222b601428f45d1bb595ad6366b34d51980083cfe789866aa6af649e021d01eaf512102f682a2c16d28218126fb7502c2665067f8df1a4a2a7ae601252a1b44c3387301f711fb04933459de8827074eadd2604b6ae1250f679de59db09dc4207c556dfadd23f23d6b18ecd028f4c57bd9488693c59acbb37c504802fdbdcbe6825bfbe34aba1100f766f591038c0c516eaa8673d64ab0c4e86f5f7dd93e3bd54569a8c991fd01b69c7c212a6777a164f097d4b3a1af0035e0e6149dd1392caf06ce8bfc1b87685a20965f7d1da743543635749be6cf5d563d2fbaafca7ae571ed70da090044af20f3a12e0fd64fb252d50139cda219d1b8d0464c1bb3cd2429e4f980c56b5a55040a2fb09be52a869eb8669967d5093691db72a7e5280fc96a293d2e48794557d0e74a146b2308dcd202ee484e07ee47586eeeee188f96ecf81a87d8b69ca33d3162f77f6a39fdce7518d3ea0d6de55716ec64826535348b5e52c97d5fcc53b95d15ad706a540ac1a99ef419fd9264c74c80ea63817ccb7b9c8ef00712fb15570e37e99378fe6bc04ae0450f3f77f3a163c138307887261852630451ed4a9af786522fbc631dea898bdb59846180915d002cfd6404a2bd3233799cc941c0a2a558b44cdd74a8227d468f54da62f87c6a7dc6d5c46a6600ea4f5eb795686feddac54be251ab2ebd83a109dee3791607cd1e225b88a9fb87290726d0dba5d9dd6523f6b359e104212b2991af5b4d592380751a45812c3c84f1c08def9a80e903602583f3b8f9da6572057e167bfb3ecb82692e4670cb01c4c75c26a333e21cce214b4d5715ba1c10a537b576882e5a13c3214a8842ce7244a396193271d025d50658a290d91ab90d6fdf32e5b119263f2f1177177aa890589d533ea86bec4ef0f1f08b7178dbbbf127219ec1263919ff52e3b0d1bfc164ef8529be0ddcb105f5e990fe8337f49ee9ef88423522cc29234e69ffd613298b6a4f788e924d9f2c9bb9866ea577ff972b7a6a9ebebbf64a678b31fbe079701dc1e4e4d00a52a58cd90d717046ea60dce80992710f293bfd9bcff799a4b5e0ea8fdd8d1a4a3a369e2f76e9fde4a3b003c6d52ca22f8729b347bd3fafe77938ec4f98d3b15d16346491e9bd89ea378d5ba71d9ab2db0db44f3408896982e09f1477cb99d8c7bf42c5d07f9db5c7c6a863c726d91b9c568ebc994c279f99b1c5dc5d69d82132ffa69789ef353275836075f1a56f44c9fce7a141610ac3ee19f9ff76c4d93ee6822e43f0f816be031bb3fe08b536b4896b7cfb37071cf56115dcab7a4faf0521c920623781b9b11d1ad9fc5f2b022e49580e0757c7c333";
    let reported_tower_height = 1;

    // return solution
    let proof = MinerState::create_proof_blob(challenge, difficulty, solution);
    MinerState::commit_state(sender, proof);

    let verified_tower_height_after = MinerState::test_helper_get_miner_tower_height({{alice}});
    // Debug::print(&verified_tower_height_after);

    Transaction::assert(verified_tower_height_after == reported_tower_height, 10008001);


}
}
// check: ABORTED
