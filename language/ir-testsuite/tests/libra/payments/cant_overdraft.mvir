//! account: alice, 0, 0, 0Coin1

import 0x1.DiemAccount;
import 0x1.Coin1;
import 0x1.Diem;
import 0x1.Signer;

main(account: &signer) {
    let sender_balance: u64;
    let all_coins: Diem.Diem<Coin1.Coin1>;
    let one_coin: Diem.Diem<Coin1.Coin1>;
    let addr: address;
    let with_cap: DiemAccount.WithdrawCapability;

    addr = Signer.address_of(copy(account));
    sender_balance = DiemAccount.balance<Coin1.Coin1>(copy(addr));
    with_cap = DiemAccount.extract_withdraw_capability(copy(account));
    DiemAccount.pay_from<Coin1.Coin1>(&with_cap, {{alice}}, copy(sender_balance), h"", h"");

    assert(DiemAccount.balance<Coin1.Coin1>(copy(addr)) == 0, 42);

    DiemAccount.pay_from<Coin1.Coin1>(&with_cap, {{alice}}, move(sender_balance), h"", h"");
    DiemAccount.restore_withdraw_capability(move(with_cap));

    return;
}

// check: "Keep(ABORTED { code: 1288,"
