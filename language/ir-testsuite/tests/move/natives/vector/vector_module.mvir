module M {
import 0x1.Coin1;
    import 0x1.Diem;
    import 0x1.Vector;
    import 0x1.Signer;
    resource Coins { f: vector<Diem.Diem<Coin1.Coin1>> }

    public new(account: &signer) {
        let coin_vec: vector<Diem.Diem<Coin1.Coin1>>;
        let coins: Self.Coins;
        coin_vec = Vector.empty<Diem.Diem<Coin1.Coin1>>();
        coins = Coins { f: move(coin_vec)};

        move_to<Coins>(move(account), move(coins));
        return;
    }

    public put_coin(account: &signer, coin: Diem.Diem<Coin1.Coin1>) acquires Coins {
        let coins_ref: &mut Self.Coins;
        let v_ref: &mut vector<Diem.Diem<Coin1.Coin1>>;

        coins_ref = borrow_global_mut<Coins>(Signer.address_of(move(account)));
        v_ref = &mut move(coins_ref).f;
        Vector.push_back<Diem.Diem<Coin1.Coin1>>(move(v_ref), move(coin));
        return;
    }

    public get_value(account: &signer, i: u64): u64 acquires Coins {
        let coins_ref: &Self.Coins;
        let v_ref: &vector<Diem.Diem<Coin1.Coin1>>;
        let coin_ref: &Diem.Diem<Coin1.Coin1>;

        coins_ref = borrow_global<Coins>(Signer.address_of(move(account)));
        v_ref = &move(coins_ref).f;
        coin_ref = Vector.borrow<Diem.Diem<Coin1.Coin1>>(move(v_ref), move(i));

        return Diem.value<Coin1.Coin1>(move(coin_ref));
    }

    public pop(account: &signer): Diem.Diem<Coin1.Coin1> acquires Coins {
        let coins_ref: &mut Self.Coins;
        let v_ref: &mut vector<Diem.Diem<Coin1.Coin1>>;

        coins_ref = borrow_global_mut<Coins>(Signer.address_of(move(account)));
        v_ref = &mut move(coins_ref).f;
        return Vector.pop_back<Diem.Diem<Coin1.Coin1>>(move(v_ref));
    }
}

//! new-transaction
import {{default}}.M;
import 0x1.Coin1;
import 0x1.Diem;

main(account: &signer) {
    M.new(copy(account));
    M.put_coin(copy(account), Diem.zero<Coin1.Coin1>());

    return;
}
