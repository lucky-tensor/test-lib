address DiemFramework {

  /// Initially this was written as an example of how to use VoteLib, to create a standalone poll.
  /// This module can be used to create a poll on any address.
  /// A third party contract can incorporate this simple poll if they want to include a "handler" which will be triggered when the poll is completed.

  module BinaryPolls {

    use DiemFramework::VoteLib::{Self, Vote};
    use Std::GUID;
    use Std::Vector;
    use Std::Signer;
    use Std::Errors;
    // use Std::Option::{Self, Option};
    use Std::Option;
    // use DiemFramework::VoteLib;

    const EINVALID_VOTE: u64 = 0;

    // struct DummyTally has store, drop, copy {}

    /// a tally can have any kind of data to support the vote.
    /// this is an example of a binary count.
    /// A dev should also insert data into the tally, to be used in an
    /// action that is triggered on completion.
    struct BinaryPolls has key, drop, store {
      guid_cap: GUID::CreateCapability,
      poll: Vote<BinaryTally>,
    }

    struct BinaryTally<BallotData> has drop, store {
      ballot_data: BallotData, // can be empty, just for purposes of naming like: `struct ShouldWeDothis {}`
      votes_for: u64,
      votes_against: u64,
      voter_enrollment: vector<address>, // this is the list of voters allowed. In your own implementation you may filter in the tx script or do a bloom filter.
      voted: vector<address>, // this is a list of voters who have voted. You may prefer to move the voted flag to the end user's address (or do a bloom filter).
      deadline_epoch: u64,
    }

    // /// a tally can have some arbitrary data payload.
    // struct ExampleIssueData has store, drop, copy {
    //   pay_this_person: address,
    //   amount: u64,
    //   description: vector<u8>,
    // }

    /// the ability to update tallies is usually restricted to signer
    /// since the signer is the one who can create the GUID::CreateCapability
    /// A third party contract can store that capability to access based on its own vote logic. Danger.
    // struct VoteCapability has key {
    //   guid_cap: GUID::CreateCapability,
    // }

        //////// STANDALONE VOTE ////////
    // /// Initialize poll struct which will be stored as-is on the account under Vote<Type>.
    // /// Developers who need more flexibility, can instead construct the Vote object and then wrap it in another struct on their third party module.
    // public fun standalone_init_poll_at_address<TallyType: drop + store>(
    //   sig: &signer,
    //   poll: Vote<TallyType>,
    // ) {
    //   move_to<Vote<TallyType>>(sig, poll)
    // }

    // /// If the Vote is standalone at root of address, you can use thie function as long as the CreateCapability is available.
    // public fun standalone_propose_ballot<TallyType: drop + store>(
    //   guid_cap: &GUID::CreateCapability,
    //   tally_type: TallyType,
    // ) acquires Vote {
    //   let addr = GUID::get_capability_address(guid_cap);
    //   let poll = borrow_global_mut<Vote<TallyType>>(addr);
    //   propose_ballot(poll, guid_cap, tally_type);
    // }

    // public fun standalone_update_tally<TallyType: drop + store> (
    //   guid_cap: &GUID::CreateCapability,
    //   uid: &GUID::ID,
    //   tally_type: TallyType,
    // ) acquires Vote {
    //   let addr = GUID::get_capability_address(guid_cap);
    //   let poll = borrow_global_mut<Vote<TallyType>>(addr);
    //   let (found, idx, status_enum, _completed) = find_anywhere(poll, uid);
    //   assert!(found, Errors::invalid_argument(ENO_BALLOT_FOUND));
    //   let b = get_ballot_mut(poll, idx, status_enum);
    //   b.tally_type = tally_type;
    // }

    // /// tuple if the ballot is (found, its index, its status enum, is it completed)
    // public fun standalone_find_anywhere<TallyType: drop + store>(guid_cap: &GUID::CreateCapability, uid: &GUID::ID): (bool, u64, u8, bool) acquires Vote {
    //   let vote_address = GUID::get_capability_address(guid_cap);
    //   let poll = borrow_global_mut<Vote<TallyType>>(vote_address);
    //   find_anywhere(poll, uid)
    // }

    // // public fun standalone_get_tally_copy<TallyType: drop + store>(guid_cap: &GUID::CreateCapability, uid: &GUID::ID): TallyType acquires Vote {
    // //   let vote_address = GUID::get_capability_address(guid_cap);
    // //   let poll = borrow_global_mut<Vote<TallyType>>(vote_address);
    // //   get_tally_copy(poll, uid)
    // // }

    // public fun standalone_complete_and_move<TallyType: drop + store>(guid_cap: &GUID::CreateCapability, uid: &GUID::ID, to_status_enum: u8) acquires Vote {
    //   let vote_address = GUID::get_capability_address(guid_cap);
    //   let poll = borrow_global_mut<Vote<TallyType>>(vote_address);
      
    //   let (found, idx, from_status_enum, _completed) = find_anywhere(poll, uid);
    //   assert!(found, Errors::invalid_argument(ENO_BALLOT_FOUND));

    //   let b = get_ballot_mut(poll, idx, from_status_enum);
    //   complete_ballot(b);
    //   move_ballot(poll, uid, from_status_enum, to_status_enum);

    // }


    /// The signer can always access a new GUID::CreateCapability
    /// On a multisig type account, will need to store the CreateCapability 
    /// wherever the multisig authorities can access it. Be careful ou there!
    // public fun init_empty_tally(sig: &signer) {
    //   let poll = VoteLib::new_poll<DummyTally>();


    //   let guid_cap = GUID::gen_create_capability(sig);

    //   VoteLib::standalone_init_poll_at_address<DummyTally>(sig, poll);

    //   VoteLib::standalone_propose_ballot<DummyTally>(&guid_cap, DummyTally {})

    // }


    public fun init_useful_tally(
      sig: &signer,

    ) {
      let poll = VoteLib::new_poll<BinaryTally>();




      let guid_cap = GUID::gen_create_capability(sig);


      // let tally_type = BinaryTally {
      //   votes_for: 0,
      //   votes_against: 0,
      //   voter_enrollment,
      //   voted: Vector::empty(),
      //   deadline_epoch,
      // };


      // VoteLib::propose_ballot(&poll, &guid_cap, tally_type);

      // // store the capability in the account so it can be used later by someone other than the owner of the account. (e.g. a voter.)
      move_to(sig, BinaryPolls<PollName> { 
        guid_cap,
        poll: v_struct,
        // votes_for: 0,
        // votes_against: 0,
        // voter_enrollment,
        // voted: Vector::empty(),
        // deadline_epoch,
        // name,
        // data,
      });

      
    }

    // // The voting handlers are defined by the thrid party module NOT the VoteLib module. The VoteLib module only provides the APIs to move proposals from one list to another. The external contract needs to decide how that should happen.

    // public fun vote<IssueData: drop + store>(sig: &signer, vote_address: address, id: &GUID::ID, vote_for: bool) acquires BinaryPolls {

    // // get the GUID capability stored here
    // let state = borrow_global_mut<BinaryPolls<IssueData>>(vote_address);
    // // 

    
    //   let (found, _idx, status_enum, is_completed) = VoteLib::find_anywhere<IssueData>(&state.poll, id);

    //   assert!(found, Errors::invalid_argument(EINVALID_VOTE));
    //   assert!(!is_completed, Errors::invalid_argument(EINVALID_VOTE));
    //   // is a pending ballot
    //   assert!(status_enum == 0, Errors::invalid_argument(EINVALID_VOTE));


    // // // get_ballot_type

    // // get ballot and check signer did not already vote
    // let ballot = VoteLib::get_ballot_by_id_mut<ExampleIssueData>(&mut state.poll, id);

    // //   // check if the signer has already voted
    // //   let signer_addr = Signer::address_of(sig);
    // //   let found = Vector::contains(&ballot.voters, &signer_addr);
    // //   assert!(!found, Errors::invalid_argument(0));

    // // //   if (vote_for) {
    // // //     t.votes_for = t.votes_for + 1;
    // // //   } else {
    // // //     t.votes_against = t.votes_against + 1;
    // // //   };


    // // //   // add the signer to the list of voters
    // // //   Vector::push_back(&mut t.voters, signer_addr);
      

    // // //   // update the tally

    // // //   maybe_tally(&mut t);

    // // //   // update the ballot
    // // //   VoteLib::standalone_update_tally<BinaryPolls<ExampleIssueData>>(cap, id,  copy t);


    // // //   if (Option::is_some(&t.tally_result)) {
    // // //     let passed = *Option::borrow(&t.tally_result);
    // // //     let status_enum = if (passed) {
    // // //       // run the payment handler
    // // //       payment_handler(&t);
    // // //       1 // approved
    // // //     } else {
          
    // // //       2 // rejected
    // // //     };
    // // //     // since we have a result lets update the VoteLib state
    // // //     VoteLib::standalone_complete_and_move<BinaryPolls<ExampleIssueData>>(cap, id, status_enum);

    // // //   }

      


    // }

    // fun payment_handler(t: &BinaryPolls<ExampleIssueData>) {
        
    //       // do the action
    //       // pay the person

                
    //     let _payee = t.issue_data.pay_this_person;
    //     let _amount = t.issue_data.amount;
    //     let _description = *&t.issue_data.description;
    //     // MAKE THE PAYMENT.
    // }

    // fun maybe_tally(t: &mut BinaryPolls<ExampleIssueData>): Option<bool> {
    //   // check if the tally is complete
    //   // if so, move the tally to the completed list
    //   // if not, do nothing

    //   if (DiemConfig::get_current_epoch() > t.deadline_epoch) {
    //     // tally is complete
    //     // move the tally to the completed list
    //     // call the action
    //     if (t.votes_for > t.votes_against) {
    //       t.tally_result = Option::some(true);
    //     } else {
    //       t.tally_result = Option::some(false);
    //     }

    //   };

    //   *&t.tally_result

    // }

  }
}