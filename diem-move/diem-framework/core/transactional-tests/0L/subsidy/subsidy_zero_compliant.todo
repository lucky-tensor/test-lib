//# init --validators Alice
//#      --addresses Bob=0x4b7653f6566a52c9b496f245628a69a0
//#      --private-keys Bob=f5fd1521bd82454a9834ef977c389a0201f9525b11520334842ab73d2dcbf8b7

//# block --proposer Alice --time 1 --round 0

//! NewBlockEvent

//# run --admin-script --signers DiemRoot Bob
script {
    use DiemFramework::DiemSystem;
    use DiemFramework::MinerState;
    use DiemFramework::Globals;
    // use DiemFramework::GAS::GAS;
    use DiemFramework::TestFixtures;
    use DiemFramework::Debug::print;

    fun main(_dr: signer, sender: signer) {
        // Tests on initial size of validators
        assert!(DiemSystem::is_validator(@Alice), 7357300101021000);
        assert!(!DiemSystem::is_validator(@Bob), 7357300101031000);
        
        MinerState::test_helper_init_miner(
            &sender,
            Globals::get_difficulty(),
            TestFixtures::alice_0_easy_chal(),
            TestFixtures::alice_0_easy_sol()
        );

        MinerState::test_helper_mock_mining(&sender, 5);

        // assert!(MinerState::get_count_in_epoch(@Bob) == 1, 7357300101041000);
        print(&MinerState::get_count_in_epoch(@Bob));
        // assert!(DiemAccount::balance<GAS>(@Alice) == 1000000, 7357300101051000);
        // assert!(NodeWeight::proof_of_weight(@Alice) == 0, 7357300101051000);

        // Alice continues to mine after genesis.
        // This test is adapted from chained_from_genesis.move
        // MinerState::test_helper_mock_mining(&sender, 5);
        assert!(MinerState::get_count_in_epoch(@Bob) == 5, 7357300101071000);
    }
}
// check: EXECUTED


//////////////////////////////////////////////
///// Trigger reconfiguration at 61 seconds ////
//# block --proposer Alice --time 61000000 --round 15

///// TEST RECONFIGURATION IS HAPPENING ////
// check: NewEpochEvent
//////////////////////////////////////////////

//# run --admin-script --signers DiemRoot DiemRoot
script {  
    // use DiemFramework::NodeWeight;
    use DiemFramework::GAS::GAS;
    use DiemFramework::DiemAccount;
    use DiemFramework::Subsidy;
    use DiemFramework::Globals;
    use DiemFramework::Debug::print;

    fun main() {
        // We are in a new epoch.

        let expected_subsidy = Subsidy::subsidy_curve(
          Globals::get_subsidy_ceiling_gas(),
          0,
          Globals::get_max_validators_per_set(),
        );

        // let starting_balance = 1000000;

        // let operator_refund = 4336 * 5; // BASELINE_TX_COST * proofs = 21680

        // let ending_balance = starting_balance + expected_subsidy - operator_refund;

        print(&expected_subsidy);
        print(&DiemAccount::balance<GAS>(@Alice));
        assert!(expected_subsidy == 0, 7357000180113);  
        // assert!(NodeWeight::proof_of_weight(@Alice) == 1, 7357000180114);  
    }
}
//check: EXECUTED