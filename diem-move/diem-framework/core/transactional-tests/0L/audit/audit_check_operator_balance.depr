//# init --validators Alice

// Test audit function val_audit_passing having not enough balance
//# run --admin-script --signers DiemRoot Alice
script {
    use DiemFramework::Audit;
    use DiemFramework::ValidatorConfig;
    use DiemFramework::AutoPay;
    use DiemFramework::TowerState;
    use DiemFramework::GAS::GAS;
    use DiemFramework::DiemAccount;
    use DiemFramework::Testnet;
    
    fun main(vm: signer, alice_account: signer) {
        // Need to unset testnet to properly test this function
        Testnet::remove_testnet(&vm);
        // enable autopay
        AutoPay::enable_autopay(&alice_account);
        assert!(AutoPay::is_enabled(@Alice), 7357007002001);
        assert!(ValidatorConfig::is_valid(@Alice), 7357007002002);
        assert!(TowerState::is_init(@Alice), 7357007002003);
        
        // check operator zero balance
        let oper = ValidatorConfig::get_operator(@Alice);
        // operator should get 1 GAS from owner at genesis
        assert!(DiemAccount::balance<GAS>(oper) == 1000000, 7357007002004);

        // should pass audit.
        assert!(Audit::val_audit_passing(@Alice), 7357007002005);
        // transfer not enough balance to operator
        let oper = ValidatorConfig::get_operator(@Alice);
        // Drain the operator account
        DiemAccount::vm_make_payment_no_limit<GAS>(
            oper,
            @Alice,
            1000000,
            x"",
            x"",
            &vm
        );
        assert!(DiemAccount::balance<GAS>(oper) == 0, 7357007002006);
        assert!(!Audit::val_audit_passing(@Alice), 7357007002007);
    }
}
// check: EXECUTED