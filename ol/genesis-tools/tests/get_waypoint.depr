use std::{path::PathBuf, fs};
// use std::str ::FromStr;
// use diem_wallet::io_utils::recover;
use ol_genesis_tools::{recover::{read_from_recovery_file}, fork_genesis::{make_recovery_genesis_from_vec_legacy_recovery}};



// The expected arguments of cli for exporting a V5 JSON recovery file from a db backup is:
// cargo r -p ol-genesis-tools -- --recover /opt/rec.json --snapshot-path /opt/state_ver*

#[tokio::test]
async fn test_parse_json_for_all_users_and_save_blob() {
  let recovery_json_path = json_path();
  let output_path = json_path().parent().unwrap().join("fork_genesis.blob");
  dbg!(&recovery_json_path);
  dbg!(&output_path);

  let recovery = read_from_recovery_file(&recovery_json_path);

  let len = recovery.len();
  dbg!(&len);

  make_recovery_genesis_from_vec_legacy_recovery(
      recovery,
      output_path.clone(),
      true
  ).expect("ERROR: failed to create genesis from recovery file");

  assert!(output_path.exists(), "file not created");
  fs::remove_file(output_path);
}

fn json_path() -> PathBuf{
  use std::path::Path;
  let path = env!("CARGO_MANIFEST_DIR");
  Path::new(path)
    .parent()
    .unwrap()
    .parent()
    .unwrap()
    .join("ol/fixtures/rescue/sample_export_recovery.json").to_owned()

}


// function that calls compute_genesis from /config/management/genesis/src/verify.rs 

fn read_db_and_compute_genesis(genesis_path: PathBuf) -> Result<(DbReaderWriter, Waypoint), 
Error> {
    let db_path = TempPath::new();
    let (db_rw, expected_waypoint) = compute_genesis(&genesis_path, db_path.path())?;
    Ok((db_rw, expected_waypoint))
}