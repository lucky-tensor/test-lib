//! Benchmarks

use criterion::{criterion_group, criterion_main, Criterion};
use tower::delay;
use vdf::VDFParams;
use vdf::WesolowskiVDFParams;
use vdf::VDF;

fn bench_delay(c: &mut Criterion) {
    c.bench_function("do_delay_100", |b| {
        b.iter(|| delay::do_delay(b"test preimage"))
    });

    c.bench_function("do_delay_preimage", |b| {
        b.iter(|| {
            let bytes = hex::decode(ALICE_PREIMAGE).unwrap();
            delay::do_delay(bytes.as_slice())
        })
    });

    c.bench_function("verify_100_2048", |b| {
        b.iter(|| {
            let preimage_bytes = hex::decode(ALICE_PREIMAGE).unwrap();
            let proof_bytes = hex::decode(ALICE_PROOF_100_2048).unwrap();
            delay::verify(preimage_bytes.as_slice(), proof_bytes.as_slice())
        })
    });

    c.bench_function("prove_100_2048", |b| {
        b.iter(|| {
            let security = 2048;
            let difficulty = 100;
            let preimage_bytes = hex::decode(ALICE_PREIMAGE).unwrap();

            let vdf: vdf::WesolowskiVDF = WesolowskiVDFParams(security).new();
            vdf.solve(preimage_bytes.as_slice(), difficulty)
                .expect("iterations should have been valiated earlier")
        })
    });
    
    c.bench_function("prove_100_1024", |b| {
        b.iter(|| {
            let security = 1024;
            let difficulty = 100;
            let preimage_bytes = hex::decode(ALICE_PREIMAGE).unwrap();

            let vdf: vdf::WesolowskiVDF = WesolowskiVDFParams(security).new();
            vdf.solve(preimage_bytes.as_slice(), difficulty)
                .expect("iterations should have been valiated earlier")
        })
    });

    c.bench_function("prove_100_512", |b| {
        b.iter(|| {
            let security = 512;
            let difficulty = 100;
            let preimage_bytes = hex::decode(ALICE_PREIMAGE).unwrap();

            let vdf: vdf::WesolowskiVDF = WesolowskiVDFParams(security).new();
            vdf.solve(preimage_bytes.as_slice(), difficulty)
                .expect("iterations should have been valiated earlier")
        })
    });
}

// sample size configs not documented. Found here: https://github.com/bheisler/criterion.rs/issues/407
criterion_group! {
    name = ol_benches;
    config = Criterion::default().sample_size(10);  // sampling size
    targets = bench_delay
}

criterion_main!(ol_benches);

const ALICE_PREIMAGE: &str = "87515d94a244235a1433d7117bc0cb154c613c2f4b1e67ca8d98a542ee3f59f5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000304c20746573746e65746400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050726f74657374732072616765206163726f737320746865206e6174696f6e";

const ALICE_PROOF_100_2048: &str = "002c4dc1276a8a58ea88fc9974c847f14866420cbc62e5712baf1ae26b6c38a393c4acba3f72d8653e4b2566c84369601bdd1de5249233f60391913b59f0b7f797f66897de17fb44a6024570d2f60e6c5c08e3156d559fbd901fad0f1343e0109a9083e661e5d7f8c1cc62e815afeee31d04af8b8f31c39a5f4636af2b468bf59a0010f48d79e7475be62e7007d71b7355944f8164e761cd9aca671a4066114e1382fbe98834fe32cf494d01f31d1b98e3ef6bffa543928810535a063c7bbf491c472263a44d9269b1cbcb0aa351f8bd894e278b5d5667cc3f26a35b9f8fd985e4424bedbb3b77bdcc678ccbb9ed92c1730dcdd3a89c1a8766cbefa75d6eeb7e
